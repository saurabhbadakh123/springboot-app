name: my-CD-pipeline

trigger: none

resources:
  pipelines:
  - pipeline: cipipeline
    source: Web_Application
    trigger: 
      enabled: true  # Auto-trigger when CI completes

variables:
  imageName: 'springboot-app'
  # Get the tag from the CI pipeline
  tag: $[ variables['resources.pipeline.cipipeline.buildId'] ]  
  acrLoginServer: 'myacrrepo7066.azurecr.io'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Deploy
  displayName: Deploy to AKS
  jobs:
  - job: Deploy
    displayName: Deploy Spring Boot App to AKS
    steps:
    - checkout: self
      # Clean the working directory to prevent path issues
      clean: true  

    - task: AzureCLI@2
      displayName: 'Configure AKS Access'
      inputs:
        azureSubscription: 'serviceconnection-azurecli'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Attach ACR to AKS (one-time setup)
          az aks update -n myAKSCluster -g myResourceGroup --attach-acr myacrrepo7066
          # Get AKS credentials
          az aks get-credentials --resource-group myResourceGroup --name myAKSCluster --overwrite-existing

    - script: |
        echo "Using tag from CI pipeline: $(tag)"
        # Verify the exact file path
        ls -R k8s  
        # Update deployment.yaml with the correct path
        sed -i "s#__IMAGE_TAG__#$(tag)#g" k8s/deployment.yaml
        echo "Deploying: $(acrLoginServer)/$(imageName):$(tag)"
        cat k8s/deployment.yaml  # Debug output
      displayName: 'Update Image Tag'

    - task: Kubernetes@1
      displayName: 'Apply Deployment'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'serviceconnection-azurecli'
        azureResourceGroup: 'myResourceGroup'
        kubernetesCluster: 'myAKSCluster'
        command: 'apply'
        useConfigurationFile: true
        configuration: 'k8s/deployment.yaml'  # Fixed file extension (.yaml not .yml)
